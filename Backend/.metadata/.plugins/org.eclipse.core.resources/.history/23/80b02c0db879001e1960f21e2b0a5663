package musiquest.Course;

import org.springframework.web.bind.annotation.RestController;

import musiquest.Leaderboard.LeaderboardEntry;
import musiquest.SoloUser.SoloUser;
import musiquest.StudentUser.StudentUser;
import musiquest.StudentUser.StudentUserRepository;
import musiquest.TeacherUser.TeacherUser;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@RestController
@RequestMapping("/courses")
public class CourseController {

	@Autowired
	private CourseRepository courseRepository;
	
	@Autowired
	private StudentUserRepository studentRepository;
	
	private String success = "{\"message\":\"success\"}";
    public String failure = "{\"message\":\"failure\"}";
    
    @PostMapping(path = "/course")
	public String createCourse(@RequestBody TeacherUser teacher){
    	if(teacher == null) {
    		return failure;
    	}
        courseRepository.save(new Course(teacher));
        return success;
    }
    
    @GetMapping(path = "/getallcourses")
    List<Course> getAllUsers(){
        return courseRepository.findAll();
    }
    
    @Autowired
    private CourseService courseService;

    @PostMapping("/{courseId}/addStudent/{studentId}")
    public String addStudentToCourse(@PathVariable int courseId, @PathVariable int studentId) {
        Course course = courseRepository.findById(courseId).orElse(null);
        StudentUser student = studentRepository.findById(studentId).orElse(null);

        if (course != null && student != null) {
            Course updatedCourse = courseService.addStudentToCourse(course, student);
            if (updatedCourse != null) {
                return success;
            }
        }
        return failure;
    }
}
	

