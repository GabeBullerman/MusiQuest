package musiquest.SoloUser;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;


@RestController
public class SoloController {


	@Autowired
    private SoloUserRepository SolouserRepository;


    private String success = "{\"message\":\"success\"}";
    private String failure = "{\"message\":\"failure\"}";


    @GetMapping(path = "/solousers")
    List<SoloUser> getAllUsers(){
        return SolouserRepository.findAll();
    }


    @GetMapping(path = "/solouser/email/{email}")
    int getUserByEmail( @PathVariable String email){
        List<SoloUser> temp = SolouserRepository.findAll();

        for(SoloUser x: temp){
            if(x.getEmail().equals(email)){
                return x.getID();
            }
        }

        return -1;
    }

    @GetMapping(path = "/solouser/{id}")
    SoloUser getUserById( @PathVariable int id){
        return SolouserRepository.findById(id);
    }



    @PostMapping(path = "/solouser")
    String createUser(@RequestBody SoloUser user){
        if (user == null) 
            return failure;
        SolouserRepository.save(user);
        return success + user.getID();
    }

    @PutMapping("/solouser/{id}")
    SoloUser updateUser(@PathVariable int id, @RequestBody SoloUser request){
    	SoloUser user = SolouserRepository.findById(id);
        if(user == null)
            return null;
        //user.setAccountId("SOL-" + user.getName() + user.getEmail().substring(0, user.getEmail().indexOf('@')));
        SolouserRepository.save(request);
        return SolouserRepository.findById(id);
    } 
    
    @DeleteMapping("/solouser/{id}")
    SoloUser removeUser(@PathVariable int id) {
    	SoloUser user = SolouserRepository.findById(id);
    	if(user == null)
            return null;
    	SolouserRepository.deleteById(id);
    	return user;
    }
   



}
