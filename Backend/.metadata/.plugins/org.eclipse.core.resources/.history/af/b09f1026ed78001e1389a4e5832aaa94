package musiquest.Leaderboard;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import musiquest.SoloUser.SoloUser;
import musiquest.SoloUser.SoloUserRepository;

import java.util.Optional;

@RestController
@RequestMapping("/leaderboard")
public class LeaderboardController {


    private String success = "{\"message\":\"success\"}";
    public String failure = "{\"message\":\"failure\"}";
    
    
    @Autowired
    private LeaderboardService leaderboardService;

    @PostMapping("/addScore")
    public String addScore(@RequestParam int accountId, @RequestParam int score) {
        leaderboardService.addScore(accountId, score);
        return success;
    }
    
    @PutMapping("/updateScore")
    public void updateScore(@RequestParam int accountId, @RequestParam int score) {
    	leaderboardService.updateScore(accountId, score);
    }

    @GetMapping("/topScores")
    public String getTopScores(@RequestParam int limit) {
    	List<LeaderboardEntry> list= leaderboardService.getTopScores(limit);
        String temp = "";
        for(LeaderboardEntry entry: list) {
        	temp += entry.getAccountId() + " " + entry.getScore() + ",";
        }
        return temp;
    }
    
    

    @GetMapping("/scoreForAccount")
    public int getScoreForAccount(@RequestParam int accountId) {
        return leaderboardService.getScoreForAccount(accountId);
    }
	
	
}
